pragma solidity 0.4.15;


/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
    uint256 public totalSupply;
    function balanceOf(address who) public constant returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
}

contract ERC20 is ERC20Basic {
    function allowance(address owner, address spender) public constant returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    function mul(uint256 a, uint256 b) internal constant returns (uint256) {
        uint256 c = a * b;
        assert(a == 0 || c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal constant returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }

    function sub(uint256 a, uint256 b) internal constant returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal constant returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

contract BasicToken is ERC20Basic {
    using SafeMath for uint256;

    mapping(address => uint256) balances;

    /**
    * @dev transfer token for a specified address
    * @param _to The address to transfer to.
    * @param _value The amount to be transferred.
    */
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(_to != address(0));
        require(_value <= balances[msg.sender]);

        // SafeMath.sub will throw if there is not enough balance.
        balances[msg.sender] = balances[msg.sender].sub(_value);
        balances[_to] = balances[_to].add(_value);
        Transfer(msg.sender, _to, _value);
        return true;
    }

    /**
    * @dev Gets the balance of the specified address.
    * @param _owner The address to query the the balance of.
    * @return An uint256 representing the amount owned by the passed address.
    */
    function balanceOf(address _owner) public constant returns (uint256 balance) {
        return balances[_owner];
    }

}

contract StandardToken is ERC20, BasicToken {

    mapping (address => mapping (address => uint256)) internal allowed;

    /**
     * @dev Transfer tokens from one address to another
     * @param _from address The address which you want to send tokens from
     * @param _to address The address which you want to transfer to
     * @param _value uint256 the amount of tokens to be transferred
     */
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
        require(_to != address(0));
        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);

        balances[_from] = balances[_from].sub(_value);
        balances[_to] = balances[_to].add(_value);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
        Transfer(_from, _to, _value);
        return true;
    }

    /**
     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
     *
     * Beware that changing an allowance with this method brings the risk that someone may use both the old
     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     * @param _spender The address which will spend the funds.
     * @param _value The amount of tokens to be spent.
     */
    function approve(address _spender, uint256 _value) public returns (bool) {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    /**
     * @dev Function to check the amount of tokens that an owner allowed to a spender.
     * @param _owner address The address which owns the funds.
     * @param _spender address The address which will spend the funds.
     * @return A uint256 specifying the amount of tokens still available for the spender.
     */
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
        return allowed[_owner][_spender];
    }

    /**
     * approve should be called when allowed[_spender] == 0. To increment
     * allowed value is better to use this function to avoid 2 calls (and wait until
     * the first transaction is mined)
     * From MonolithDAO Token.sol
     */
    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {
        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }

    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {
        uint oldValue = allowed[msg.sender][_spender];
        if (_subtractedValue > oldValue) {
            allowed[msg.sender][_spender] = 0;
        } else {
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
        }
        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
        return true;
    }

}

contract Ownable {
    //Variables
    address public owner;

    address public newOwner;

    //    Modifiers
    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    /**
     * @dev The Ownable constructor sets the original `owner` of the contract to the sender
     * account.
     */
    function Ownable() public {
        owner = msg.sender;
    }

    /**
     * @dev Allows the current owner to transfer control of the contract to a newOwner.
     * @param _newOwner The address to transfer ownership to.
     */
    function transferOwnership(address _newOwner) public onlyOwner {
        require(_newOwner != address(0));
        newOwner = _newOwner;

    }

    function acceptOwnership() public {
        if (msg.sender == newOwner) {
            owner = newOwner;
        }
    }
}

contract TaxiERC20 is StandardToken, Ownable {
    /* Public variables of the token */
    uint256 public creationBlock;

    uint8 public decimals;

    string public name;

    string public symbol;

    string public standard;

    bool public locked;

    /* Initializes contract with initial supply tokens to the creator of the contract */
    function TaxiERC20(
        uint256 _totalSupply,
        string _tokenName,
        uint8 _decimalUnits,
        string _tokenSymbol,
        bool _transferAllSupplyToOwner,
        bool _locked
    ) public {
        standard = "ERC20 0.1";
        locked = _locked;
        totalSupply = _totalSupply;

        if (_transferAllSupplyToOwner) {
            balances[msg.sender] = totalSupply;
        } else {
            balances[this] = totalSupply;
        }
        name = _tokenName;
        // Set the name for display purposes
        symbol = _tokenSymbol;
        // Set the symbol for display purposes
        decimals = _decimalUnits;
        // Amount of decimals for display purposes
        creationBlock = block.number;
    }

    /* public methods */
    function transfer(address _to, uint256 _value) public returns (bool) {
        require(locked == false);
        return super.transfer(_to, _value);
    }

    function approve(address _spender, uint256 _value) public returns (bool success) {
        if (locked) {
            return false;
        }
        return super.approve(_spender, _value);
    }

    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {
        if (locked) {
            return false;
        }
        return super.increaseApproval(_spender, _addedValue);
    }

    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {
        if (locked) {
            return false;
        }
        return super.decreaseApproval(_spender, _subtractedValue);
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        if (locked) {
            return false;
        }

        return super.transferFrom(_from, _to, _value);
    }
}

contract MintingERC20 is TaxiERC20 {

    //Variables
    mapping (address => bool) public minters;

    uint256 public maxSupply;
    bool public disableMinting;

    //    Modifiers
    modifier onlyMinters () {
        require(true == minters[msg.sender]);
        _;
    }

    function MintingERC20(
        uint256 _initialSupply,
        uint256 _maxSupply,
        string _tokenName,
        uint8 _decimals,
        string _symbol,
        bool _transferAllSupplyToOwner,
        bool _locked
    )
    public
    TaxiERC20(_initialSupply, _tokenName, _decimals, _symbol, _transferAllSupplyToOwner, _locked)
    {
        standard = "MintingERC20 0.1";
        minters[msg.sender] = true;
        maxSupply = _maxSupply;
    }

    function addMinter(address _newMinter) public onlyOwner {
        minters[_newMinter] = true;
    }

    function removeMinter(address _minter) public onlyOwner {
        minters[_minter] = false;
    }

    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {
        if (true == disableMinting) {
            return uint256(0);
        }

        if (_amount == uint256(0)) {
            return uint256(0);
        }

        if (totalSupply.add(_amount) > maxSupply) {
            return uint256(0);
        }

        totalSupply = totalSupply.add(_amount);
        balances[_addr] = balances[_addr].add(_amount);
        Transfer(address(0), _addr, _amount);

        return _amount;
    }
}

contract Multivest is Ownable {
    /* public variables */
    mapping (address => bool) public allowedMultivests;

    /* events */
    event MultivestSet(address multivest);

    event MultivestUnset(address multivest);

    event Contribution(address holder, uint256 value, uint256 tokens);

    modifier onlyAllowedMultivests() {
        require(true == allowedMultivests[msg.sender]);
        _;
    }

    /* constructor */
    function Multivest(address _multivest) public {
        allowedMultivests[_multivest] = true;
    }

    function setAllowedMultivest(address _address) public onlyOwner {
        allowedMultivests[_address] = true;
    }

    function unsetAllowedMultivest(address _address) public onlyOwner {
        allowedMultivests[_address] = false;
    }

    function multivestBuy(address _address, uint256 _value) public onlyAllowedMultivests {
        bool status = buy(_address, _value);
        require(status == true);
    }

    function buy(address _address, uint256 value) internal returns (bool);

}

contract Taxi is MintingERC20 {

    uint256 public maxSupply = (60 * uint(10) ** 6) * uint(10) ** 18; // 60,000,000
    ICO public ico;

    SaleToken public preIco;

    // We block token transfers
    bool public transferFrozen = false;

    function Taxi(
        uint256 _initialSupply,
        bool _locked
    )
    public
    MintingERC20(_initialSupply, maxSupply, "BlockChainTaxi", 18, "BCT", false, _locked)
    {
        standard = "BlockChainTaxi 0.1";
    }

    function setICO(address _ico) public onlyOwner {
        require(_ico != address(0));
        ico = ICO(_ico);
    }

    function setPreICO(address _preIco) public onlyOwner {
        require(_preIco != address(0));
        preIco = SaleToken(_preIco);
    }

    function transferPreICOUnsoldTokens() public onlyOwner returns (bool) {
        require(address(preIco) != address(0));
        require(block.timestamp > preIco.endTime());
        uint256 unusedTokens = preIco.calculateUnsoldTokens();
        if (uint256(0) == unusedTokens) {
            return false;
        }
        require(address(0) != address(ico));
        ico.updateTiers(unusedTokens);
        preIco.burnUnsoldTokens();
        return true;
    }

    /*
     Manually burn unused tokens.
     the date has to be after ICO
    */
    function burnUnusedTokens() public onlyOwner {
        if (address(ico) != address(0) && !ico.isActive()) {
            //            prevent run before ICO
            if (block.timestamp >= ico.startTime()) {
                disableMinting = true;
            }
        }
    }

    // prevent manual minting tokens when ICO or PreICO is active;
    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {
        if (msg.sender == owner) {
            require(address(ico) != address(0));
            require(address(preIco) != address(0));
            if (!preIco.isActive() && !ico.isActive()) {
                return super.mint(_addr, _amount);
            }
            return uint256(0);
        }
        return super.mint(_addr, _amount);
    }

    function setLocked(bool _locked) public onlyOwner {
        locked = _locked;
    }

    // Allow token transfer.
    function freezing(bool _transferFrozen) public onlyOwner {
        transferFrozen = _transferFrozen;
    }

    // ERC20 functions
    // =========================
    function transfer(address _to, uint _value) public returns (bool) {
        require(!transferFrozen);
        return super.transfer(_to, _value);
    }

    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {
        require(!transferFrozen);
        return super.transferFrom(_from, _to, _value);
    }
}

contract SaleToken is Multivest {
    using SafeMath for uint256;

    uint256 public constant BCT_DECIMALS = 10 ** 18;
    // The token being sold
    Taxi public taxi;

    // start and end timestamps where investments are allowed (both inclusive)
    uint256 public startTime;
    uint256 public endTime;

    uint256 public maxTokenSupply;

    // amount of sold tokens
    uint256 public soldTokens;

    // amount of raised money in wei
    uint256 public collectedEthers;
    // addresses where funds are collected
    address public etherHolder0;

    address public etherHolder1;

    modifier onlyTaxi() {
        require(msg.sender == address(taxi));
        _;
    }

    function SaleToken(
        address _multivestAddress,
        address _etherHolder0,//67.5%
        address _etherHolder1,//32,5%
        address _taxi,
        uint256 _startTime,
        uint256 _endTime,
        uint256 _maxTokenSupply
    )
    public
    Multivest(_multivestAddress)
    {
        require(_taxi != address(0));
        taxi = Taxi(_taxi);

        require((_startTime < _endTime));
        require(_etherHolder0 != address(0) && _etherHolder1 != address(0));
        require((_maxTokenSupply == uint256(0)) || (_maxTokenSupply <= taxi.maxSupply()));

        etherHolder0 = _etherHolder0;
        etherHolder1 = _etherHolder1;
        startTime = _startTime;
        endTime = _endTime;
        maxTokenSupply = _maxTokenSupply;
    }

    /* public methods */
    function() public payable {
        bool status = buy(msg.sender, msg.value);
        require(status == true);
        transferEthers();
    }

    // @return true if sale period is active
    function isActive() public constant returns (bool) {
        if (maxTokenSupply > uint256(0) && soldTokens == maxTokenSupply) {
            return false;
        }
        return withinPeriod();
    }

    function setTaxi(address _taxi) public onlyOwner {
        require(_taxi != address(0));
        taxi = Taxi(_taxi);
    }

    function calculateUnsoldTokens() public constant onlyTaxi returns (uint256) {
        if (
            (maxTokenSupply == 0)
            || block.timestamp <= endTime
            || (maxTokenSupply > uint256(0) && soldTokens == maxTokenSupply)
        ) {
            return uint256(0);
        }
        return maxTokenSupply.sub(soldTokens);
    }

    function burnUnsoldTokens() public onlyTaxi {
        maxTokenSupply = soldTokens;
    }

    function setEtherHolder(address _etherHolder0, address _etherHolder1) public onlyOwner {
        require(_etherHolder0 != address(0) && _etherHolder1 != address(0));
        etherHolder0 = _etherHolder0;
        etherHolder1 = _etherHolder1;
    }

    function mint(address _address, uint256 tokenAmount) public onlyOwner returns (uint256) {
        return mintInternal(_address, tokenAmount);
    }

    // @return true if the transaction can buy tokens
    function withinPeriod() public constant returns (bool) {
        return block.timestamp >= startTime && block.timestamp <= endTime;
    }

    function mintInternal(address _address, uint256 tokenAmount) internal returns (uint256) {
        require(address(taxi) != address(0));
        uint256 mintedAmount = taxi.mint(_address, tokenAmount);
        require(mintedAmount == tokenAmount);
        soldTokens = soldTokens.add(tokenAmount);
        if (maxTokenSupply > 0) {
            require(maxTokenSupply >= soldTokens);
        }

        return tokenAmount;
    }

    function transferEthers() internal {
        require(etherHolder0 != address(0) && etherHolder1 != address(0));
        require(this.balance > 0);
        etherHolder0.transfer(this.balance.mul(675).div(1000));
        etherHolder1.transfer(this.balance);
    }
}

contract PreICO is SaleToken {


    uint256 public minContribution = 1.5 ether;
    uint256 public maxContribution = 750 ether;
    uint256 public price = 2500; //2500 BCT/1ETH;

    function PreICO(
        address _multivestAddress,
        address _etherHolder0,//67.5%
        address _etherHolder1,//32,5%
        address _taxi,
        uint256 _startTime, // 1513328400  12/15/17 09:00
        uint256 _endTime, // +30 days //1515920400  01/14/2018 @ 9:00am (UTC)
        uint256 _maxTokenSupply //uint256(10000000).mul(10 ** 18)
    )
    public
    SaleToken(_multivestAddress, _etherHolder0, _etherHolder1, _taxi, _startTime, _endTime, _maxTokenSupply) {

    }

    function calculateTokensAmount(uint256 _value) public constant returns (uint256) {
        if (_value == 0) {
            return 0;
        }
        if (_value < minContribution) {
            return 0;
        }
        if (_value > maxContribution) {
            return 0;
        }
        return _value.mul(price);
    }

    function buy(address _address, uint256 _value) internal returns (bool) {
        if (_value == 0) {
            return false;
        }
        require(taxi != address(0));
        require(withinPeriod());
        require(_address != address(0));

        uint256 tokenAmount = calculateTokensAmount(_value);

        if (tokenAmount == 0) {
            return false;
        }

        uint256 mintedAmount = mintInternal(_address, tokenAmount);
        require(mintedAmount == tokenAmount);

        collectedEthers = collectedEthers.add(_value);
        Contribution(_address, _value, tokenAmount);
        return true;
    }
}

contract ICO is SaleToken {

    Tier[] public tiers;

    struct Tier {
        uint256 maxAmount;
        uint256 price;
    }

    uint256 public minContribution = 0.1 ether;
    uint256 public maxContribution = 750 ether;

    function ICO(
        address _multivestAddress,
        address _etherHolder0,//67.5%
        address _etherHolder1,//32,5%
        address _taxi,
        uint256 _startTime, //1516438800  01/20/18 09:00
        uint256 _endTime, //+30 days //1519030800  02/19/2018 @ 9:00am (UTC)
        uint256 _maxTokenSupply //uint256(50000000).mul(10 ** 18)
    )
    public
    SaleToken(_multivestAddress, _etherHolder0, _etherHolder1, _taxi, _startTime, _endTime, _maxTokenSupply) {

        tiers.push(Tier(
            uint256(20000000).mul(BCT_DECIMALS),
            uint256(2222)
        ));
        tiers.push(Tier(
            uint256(50000000).mul(BCT_DECIMALS),
            uint256(1818)
        ));

    }

    function calculateTokensAmount(uint256 _value, uint256 _soldTokens) public constant returns (uint256) {
        if (_value == 0 || _value < minContribution || _value > maxContribution) {
            return 0;
        }
        uint256 newSoldTokens = _soldTokens;
        uint256 remainingValue = _value;
        for (uint i = 0; i < tiers.length; i++) {
            Tier storage tier = tiers[i];
            if (tier.maxAmount > newSoldTokens) {

                uint256 amount = remainingValue.mul(tier.price);
                if (newSoldTokens + amount > tier.maxAmount) {
                    uint256 diff = tier.maxAmount.sub(newSoldTokens);
                    remainingValue = remainingValue.sub(diff.div(tier.price));
                    newSoldTokens = newSoldTokens.add(diff);
                } else {
                    remainingValue = 0;
                    newSoldTokens = newSoldTokens.add(amount);
                }
            }

            if (remainingValue == 0) {
                break;
            }
        }

        if (remainingValue > 0) {
            return 0;
        }

        return newSoldTokens.sub(_soldTokens);
    }

    function updateTiers(uint256 _unusedTokens) public onlyTaxi {
        for (uint i = 0; i < tiers.length; i++) {
            Tier storage tier = tiers[i];
            tier.maxAmount = tier.maxAmount.add(_unusedTokens);
        }
        maxTokenSupply = maxTokenSupply.add(_unusedTokens);
    }

    function buy(address _address, uint256 _value) internal returns (bool) {
        if (_value == 0) {
            return false;
        }
        require(address(taxi) != address(0));
        require(withinPeriod());
        require(_address != address(0));

        uint256 tokenAmount = calculateTokensAmount(_value, soldTokens);
        require(tokenAmount > 0);
        uint256 mintedAmount = mintInternal(_address, tokenAmount);
        require(mintedAmount == tokenAmount);

        collectedEthers = collectedEthers.add(_value);
        Contribution(_address, _value, tokenAmount);
        return true;
    }
}
